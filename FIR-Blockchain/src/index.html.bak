<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>FIR Form</title>
    <link rel="stylesheet" href="style.css">
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css" />
    <style>
        * {
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        
        body {
            margin: 0;
            padding: 0;
            background-color: #f5f7fa;
            color: #333;
        }
        
        nav {
            background-color: #333;
            padding: 15px;
            color: white;
            display: flex;
            justify-content: space-between;
            align-items: center;
            box-shadow: 0 2px 5px rgba(0,0,0,0.2);
        }
        
        .nav-buttons {
            display: flex;
            gap: 12px;
        }
        
        nav button, nav a.button-link {
            padding: 8px 15px;
            margin: 0 5px;
            border: none;
            border-radius: 5px;
            background-color: #007BFF;
            color: white;
            cursor: pointer;
            font-size: 16px;
            text-decoration: none;
            display: inline-block;
        }
        
        nav button:hover, nav a.button-link:hover {
            background-color: #0056b3;
        }
        
        nav a.button-link.login {
            background-color: #4CAF50;
            font-weight: bold;
        }
        
        nav a.button-link.login:hover {
            background-color: #45a049;
        }
        
        #loginStatus {
            padding: 0 20px;
            font-weight: bold;
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .status-indicator {
            display: inline-block;
            width: 10px;
            height: 10px;
            border-radius: 50%;
            background-color: #4CAF50;
            margin-right: 5px;
        }
        
        .logout-btn {
            background-color: #f44336 !important;
        }
        
        .logout-btn:hover {
            background-color: #d32f2f !important;
        }
        
        .container {
            max-width: 1200px;
            margin: 30px auto;
            padding: 0 20px;
        }
        
        #officerOnlyMessage {
            text-align: center;
            padding: 30px;
            background-color: white;
            border-radius: 10px;
            margin: 20px auto;
            max-width: 600px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            display: none;
        }
        
        #officerOnlyMessage h2 {
            color: #f44336;
            margin-top: 0;
        }
        
        #officerOnlyMessage button {
            background-color: #4CAF50;
            color: white;
            padding: 12px 24px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 16px;
            margin-top: 15px;
            transition: all 0.2s ease;
        }
        
        #officerOnlyMessage button:hover {
            background-color: #45a049;
            transform: translateY(-2px);
        }
        
        .form-container {
            background-color: white;
            padding: 30px;
            border-radius: 10px;
            box-shadow: 0 2px 15px rgba(0,0,0,0.1);
            max-width: 800px;
            margin: 0 auto;
        }
        
        .form-container h2 {
            text-align: center;
            color: #333;
            margin-top: 0;
            margin-bottom: 25px;
            font-size: 28px;
            border-bottom: 2px solid #f5f5f5;
            padding-bottom: 15px;
        }
        
        .form-row {
            display: flex;
            gap: 20px;
            margin-bottom: 15px;
        }
        
        .form-group {
            flex: 1;
            margin-bottom: 20px;
        }
        
        label {
            display: block;
            margin-bottom: 8px;
            font-weight: 500;
            color: #555;
        }
        
        input, textarea, select {
            width: 100%;
            padding: 12px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 16px;
            transition: border 0.3s ease;
        }
        
        input:focus, textarea:focus, select:focus {
            border-color: #4CAF50;
            outline: none;
            box-shadow: 0 0 0 2px rgba(76, 175, 80, 0.2);
        }
        
        textarea {
            min-height: 120px;
            resize: vertical;
        }
        
        button[type="submit"] {
            background-color: #4CAF50;
            color: white;
            padding: 14px 20px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 18px;
            width: 100%;
            margin-top: 20px;
            transition: all 0.3s ease;
            font-weight: 500;
        }
        
        button[type="submit"]:hover {
            background-color: #45a049;
            transform: translateY(-2px);
            box-shadow: 0 2px 10px rgba(0,0,0,0.2);
        }
        
        .success-message {
            background-color: #dff0d8;
            color: #3c763d;
            padding: 15px;
            border-radius: 4px;
            margin-top: 20px;
            text-align: center;
            display: none;
        }
        
        .fir-details {
            background-color: #f9f9f9;
            border-radius: 8px;
            padding: 20px;
            margin-top: 20px;
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        }
        
        .fir-details h3, .fir-details h4 {
            color: #333;
            margin-top: 0;
        }
        
        .fir-details h4 {
            margin-bottom: 10px;
            border-bottom: 1px solid #e0e0e0;
            padding-bottom: 5px;
        }
        
        .fir-summary {
            background-color: #fff;
            border: 1px solid #ddd;
            border-radius: 5px;
            padding: 15px;
            margin-bottom: 15px;
        }
        
        .fir-header {
            display: flex;
            justify-content: space-between;
            margin-bottom: 10px;
        }
        
        .fir-id {
            font-size: 1.2em;
            font-weight: bold;
            color: #333;
        }
        
        .fir-status {
            background-color: #4CAF50;
            color: white;
            padding: 3px 10px;
            border-radius: 15px;
            font-size: 0.9em;
        }
        
        .fir-meta {
            font-size: 0.9em;
            color: #666;
        }
        
        .details-container {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
            margin-bottom: 20px;
        }
        
        .details-column {
            background-color: #fff;
            border: 1px solid #ddd;
            border-radius: 5px;
            padding: 15px;
        }
        
        .description-section {
            background-color: #fff;
            border: 1px solid #ddd;
            border-radius: 5px;
            padding: 15px;
            margin-bottom: 20px;
        }
        
        .print-btn {
            background-color: #007bff;
            margin-left: 10px;
        }
        
        .print-btn:hover {
            background-color: #0069d9;
        }
        
        button.button {
            background-color: #4CAF50;
            color: white;
            padding: 10px 15px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 16px;
            transition: all 0.3s ease;
        }
        
        button.button:hover {
            background-color: #45a049;
            transform: translateY(-2px);
        }
        
        #newFirBtn {
            margin-top: 15px;
            width: 100%;
        }
        
        #successMessage.verified {
            background-color: #dff0d8;
            color: #3c763d;
            border-color: #d6e9c6;
        }
        
        #successMessage.pending {
            background-color: #fff3cd;
            color: #856404;
            border-color: #ffeeba;
        }
        
        #successMessage.error {
            background-color: #f8d7da;
            color: #721c24;
            border-color: #f5c6cb;
        }
        
        #connectWalletButton {
            background-color: #f39c12 !important;
        }
        
        #connectWalletButton:hover {
            background-color: #e67e22 !important;
        }
        
        .wallet-status {
            display: inline-block;
            font-size: 0.9em;
            margin-left: 10px;
            color: #4CAF50;
        }
        
        .error-message {
            background-color: #f8d7da;
            color: #721c24;
            padding: 15px;
            border-radius: 4px;
            margin-top: 20px;
            text-align: center;
            display: none;
        }
        
        .wallet-notification {
            background-color: #fff3cd;
            color: #856404;
            padding: 15px;
            border-radius: 8px;
            margin: 20px 0;
            text-align: left;
            border: 1px solid #ffeeba;
            display: block;
        }
        
        .wallet-notification h4 {
            margin-top: 0;
            margin-bottom: 10px;
        }
        
        .wallet-notification p {
            margin: 5px 0;
        }
        
        .highlight {
            animation: pulse 2s 1;
            box-shadow: 0 0 0 10px rgba(255, 193, 7, 0.4);
        }
        
        @keyframes pulse {
            0% {
                box-shadow: 0 0 0 0 rgba(255, 193, 7, 0.7);
            }
            70% {
                box-shadow: 0 0 0 15px rgba(255, 193, 7, 0);
            }
            100% {
                box-shadow: 0 0 0 0 rgba(255, 193, 7, 0);
            }
        }
        
        .wallet-connect-btn {
            background-color: #f39c12;
            color: white;
            border: none;
            border-radius: 4px;
            padding: 10px 16px;
            margin-top: 10px;
            cursor: pointer;
            font-weight: bold;
            width: 100%;
            font-size: 16px;
            transition: all 0.3s ease;
        }

        .wallet-connect-btn:hover {
            background-color: #e67e22;
            transform: translateY(-2px);
        }
        
        .auto-generated {
            background-color: #f8f9fa;
            border: 1px solid #ced4da;
            color: #6c757d;
            cursor: not-allowed;
            position: relative;
        }
        
        .auto-generated::after {
            content: "Auto-generated";
            position: absolute;
            right: 8px;
            top: 50%;
            transform: translateY(-50%);
            font-size: 0.7em;
            color: #dc3545;
            opacity: 0.7;
        }

        #officerDetails.auto-generated::after {
            content: "Auto-filled";
        }
        
        .auto-generated:focus {
            box-shadow: none !important;
            border-color: #ced4da !important;
        }
        
        .debug-button {
            background-color: #ff3333 !important;
        }
        
        /* Officer-only message styles */
        #officerOnlyMessage a.button-link {
            display: inline-block;
            padding: 10px 20px;
            margin: 10px 0;
            background-color: #4CAF50;
            color: white;
            border: none;
            border-radius: 5px;
            text-decoration: none;
            font-weight: bold;
            cursor: pointer;
        }
        
        #officerOnlyMessage a.button-link:hover {
            background-color: #45a049;
        }
    </style>
</head>
<body>
    <nav>
        <div class="nav-buttons">
            <button onclick="window.location.href='index.html'">FIR Form</button>
            <button onclick="window.location.href='map.html'">View Map</button>
            <a href="officer.html" id="loginLink" class="button-link login">Login</a>
            <button id="connectWalletButton">Connect Wallet</button>
            <button id="logoutButton" class="logout-btn" style="display:none" onclick="logout()">Logout</button>
            <button onclick="window.open('officer.html', '_blank')" class="debug-button">Debug: Open Login Page</button>
        </div>
        <div id="loginStatus">Not logged in</div>
    </nav>
    
    <div class="container">
        <div id="officerOnlyMessage">
            <h2>Officer Access Only</h2>
            <p>You must be logged in as an officer to file FIRs. Please login with your officer credentials.</p>
            <a href="officer.html" class="button-link login">Login as Officer</a>
        </div>

        <div class="form-container" id="firFormContainer">
            <h2>File First Information Report (FIR)</h2>
            <form id="firForm">
                <div class="form-row">
                    <div class="form-group">
                        <label for="firID">FIR ID:</label>
                        <input type="text" id="firID" placeholder="Auto-generated" readonly class="auto-generated">
                    </div>
                    <div class="form-group">
                        <label for="victimName">Victim Name:</label>
                        <input type="text" id="victimName" placeholder="Full name of victim" required>
                    </div>
                </div>

                <div class="form-row">
                    <div class="form-group">
                        <label for="victimContact">Victim Contact:</label>
                        <input type="text" id="victimContact" placeholder="Contact number" required>
                    </div>
                    <div class="form-group">
                        <label for="incidentType">Incident Type:</label>
                        <select id="incidentType" required>
                            <option value="">Select incident type</option>
                            <option value="Theft">Theft</option>
                            <option value="Assault">Assault</option>
                            <option value="Burglary">Burglary</option>
                            <option value="Vandalism">Vandalism</option>
                            <option value="Fraud">Fraud</option>
                            <option value="Other">Other</option>
                        </select>
                    </div>
                </div>

                <div class="form-row">
                    <div class="form-group">
                        <label for="incidentLocation">Incident Location:</label>
                        <input type="text" id="incidentLocation" placeholder="Full address where the incident occurred" required>
                    </div>
                    <div class="form-group">
                        <label for="incidentDate">Incident Date:</label>
                        <input type="date" id="incidentDate" required>
                    </div>
                </div>

                <div class="form-group">
                    <label for="incidentDescription">Incident Description:</label>
                    <textarea id="incidentDescription" placeholder="Provide a detailed description of the incident..." rows="5" required></textarea>
                </div>

                <div class="form-group">
                    <label for="officerDetails">Reporting Officer:</label>
                    <input type="text" id="officerDetails" placeholder="Auto-filled from login" readonly class="auto-generated">
                </div>

                <button type="submit">Submit FIR</button>
                
                <div class="success-message" id="successMessage">
                    FIR has been filed successfully!
                </div>
                <div id="errorMessage" class="error-message"></div>
            </form>
            <div class="wallet-notification" id="walletNotification">
                <div class="wallet-notification-content">
                    <h4>Blockchain Storage Not Connected</h4>
                    <p>To store FIRs on the blockchain, please connect your MetaMask wallet.</p>
                    <p>Without wallet connection, FIRs will only be stored locally.</p>
                    <button id="formConnectWalletBtn" class="wallet-connect-btn">Connect to MetaMask</button>
                </div>
            </div>
        </div>
    </div>

    <script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/web3@1.6.1/dist/web3.min.js"></script>
    
    <script>
        // FIR Contract ABI (Application Binary Interface)
        const firABI = [
            {
                "inputs": [
                    {
                        "internalType": "string",
                        "name": "_firID",
                        "type": "string"
                    },
                    {
                        "internalType": "string",
                        "name": "_victimName",
                        "type": "string"
                    },
                    {
                        "internalType": "string",
                        "name": "_victimContact",
                        "type": "string"
                    },
                    {
                        "internalType": "string",
                        "name": "_incidentLocation",
                        "type": "string"
                    },
                    {
                        "internalType": "string",
                        "name": "_incidentType",
                        "type": "string"
                    },
                    {
                        "internalType": "string",
                        "name": "_incidentDate",
                        "type": "string"
                    },
                    {
                        "internalType": "string",
                        "name": "_incidentDescription",
                        "type": "string"
                    },
                    {
                        "internalType": "string",
                        "name": "_filedBy",
                        "type": "string"
                    },
                    {
                        "internalType": "string",
                        "name": "_filedOn",
                        "type": "string"
                    },
                    {
                        "internalType": "string",
                        "name": "_status",
                        "type": "string"
                    }
                ],
                "name": "createFIR",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "string",
                        "name": "_firID",
                        "type": "string"
                    }
                ],
                "name": "getFIRByID",
                "outputs": [
                    {
                        "components": [
                            {
                                "internalType": "string",
                                "name": "firID",
                                "type": "string"
                            },
                            {
                                "internalType": "string",
                                "name": "victimName",
                                "type": "string"
                            },
                            {
                                "internalType": "string",
                                "name": "victimContact",
                                "type": "string"
                            },
                            {
                                "internalType": "string",
                                "name": "incidentLocation",
                                "type": "string"
                            },
                            {
                                "internalType": "string",
                                "name": "incidentType",
                                "type": "string"
                            },
                            {
                                "internalType": "string",
                                "name": "incidentDate",
                                "type": "string"
                            },
                            {
                                "internalType": "string",
                                "name": "incidentDescription",
                                "type": "string"
                            },
                            {
                                "internalType": "string",
                                "name": "filedBy",
                                "type": "string"
                            },
                            {
                                "internalType": "string",
                                "name": "filedOn",
                                "type": "string"
                            },
                            {
                                "internalType": "string",
                                "name": "status",
                                "type": "string"
                            }
                        ],
                        "internalType": "struct FIR.FIRDetails",
                        "name": "",
                        "type": "tuple"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            }
        ];

        // FIR contract address - update with your deployed contract address
        const firContractAddress = '0x5FbDB2315678afecb367f032d93F642f64180aa3';  // Default local Hardhat deployment address
        
        // Global variables
        let web3;
        let firContract;
        let currentAccount;
        
        // Initialize blockchain connection
        async function initWeb3() {
            // Check if MetaMask is installed
            if (window.ethereum) {
                try {
                    web3 = new Web3(window.ethereum);
                    
                    // Request account access
                    await window.ethereum.request({ method: 'eth_requestAccounts' });
                    
                    // Get the current active account
                    const accounts = await web3.eth.getAccounts();
                    currentAccount = accounts[0];
                    
                    if (!currentAccount) {
                        console.error("No accounts available after connection");
                        alert("No accounts detected in MetaMask. Please ensure you have at least one account in your wallet.");
                        return false;
                    }
                    
                    try {
                        // Check if we can connect to the network
                        const networkId = await web3.eth.net.getId();
                        console.log("Connected to network ID:", networkId);
                        
                        // Initialize the contract
                        firContract = new web3.eth.Contract(firABI, firContractAddress);
                        
                        // Test call to make sure the contract is reachable
                        try {
                            // Any simple call to verify contract connectivity
                            await firContract.methods.getFIRByID("test-id").call();
                        } catch (contractError) {
                            console.log("Contract test call failed, but that's expected if test-id doesn't exist");
                            // This is expected to fail if no FIR with this ID exists, but it still means we can reach the contract
                        }
                        
                        console.log("Web3 initialized with account:", currentAccount);
                        
                        // Setup event listener for account changes
                        window.ethereum.on('accountsChanged', function (accounts) {
                            if (accounts.length === 0) {
                                console.log('Please connect to MetaMask.');
                                // Update UI to show disconnected state
                                document.getElementById("connectWalletButton").textContent = "Connect Wallet";
                                document.getElementById("connectWalletButton").disabled = false;
                                currentAccount = null;
                                
                                // Remove wallet status if it exists
                                const walletStatus = document.querySelector(".wallet-status");
                                if (walletStatus) {
                                    walletStatus.remove();
                                }
                            } else {
                                currentAccount = accounts[0];
                                console.log(`Account changed to ${currentAccount}`);
                                
                                // Update wallet display
                                updateWalletDisplay(currentAccount);
                            }
                        });
                        
                        return true;
                    } catch (networkError) {
                        console.error("Error connecting to network:", networkError);
                        alert("Error connecting to the blockchain network. Please check if you're connected to the correct network in MetaMask.");
                        return false;
                    }
                } catch (error) {
                    console.error("Error connecting to MetaMask:", error);
                    if (error.code === 4001) {
                        // User rejected request
                        alert("Connection rejected. Please approve the connection request in MetaMask.");
                    } else {
                        // Add debug option
                        if (confirm("MetaMask connection error: " + (error.message || "Unknown error") + "\n\nWould you like to see debugging information?")) {
                            debugMetaMaskConnection();
                        }
                    }
                    return false;
                }
            } else {
                console.log('MetaMask not detected. Please install MetaMask!');
                alert('MetaMask is not installed. Please install MetaMask to use blockchain features.');
                return false;
            }
        }
        
        // Update the wallet display function to handle the notification
        function updateWalletDisplay(account) {
            if (!account) return;
            
            const shortenedAddress = account.substring(0, 6) + "..." + 
                                  account.substring(account.length - 4);
            
            // Remove existing wallet status if any
            const existingWalletStatus = document.querySelector(".wallet-status");
            if (existingWalletStatus) {
                existingWalletStatus.remove();
            }
            
            // Create and add new wallet status
            const walletStatus = document.createElement("span");
            walletStatus.className = "wallet-status";
            walletStatus.textContent = `Wallet: ${shortenedAddress}`;
            document.getElementById("loginStatus").appendChild(walletStatus);
            
            // Update button
            const connectWalletButton = document.getElementById("connectWalletButton");
            connectWalletButton.textContent = "Wallet Connected";
            connectWalletButton.disabled = true;
            
            // Hide wallet notification
            document.getElementById("walletNotification").style.display = "none";
        }
        
        // Add a function to check wallet status on page load
        function checkWalletStatus() {
            // Show wallet notification only if no wallet is connected and MetaMask is available
            if (window.ethereum && !currentAccount) {
                document.getElementById("walletNotification").style.display = "block";
            } else if (currentAccount) {
                document.getElementById("walletNotification").style.display = "none";
            }
        }
        
        // Utility function to store FIR in blockchain
        async function submitToBlockchain(firData) {
            const statusElement = document.getElementById("successMessage");
            statusElement.textContent = "Connecting to wallet...";
            
            console.log("Begin blockchain submission with data:", firData);
            
            try {
                // Check if Web3 and accounts are available
                if (!web3 || !firContract) {
                    console.error("Web3 or contract not initialized");
                    throw new Error("Web3 or contract not initialized");
                }
                
                // Request account access if needed
                const accounts = await web3.eth.getAccounts();
                console.log("Current accounts:", accounts);
                
                if (accounts.length === 0) {
                    statusElement.textContent = "Please connect your wallet...";
                    console.log("No accounts, requesting access");
                    await window.ethereum.request({ method: 'eth_requestAccounts' });
                }
                
                const accounts2 = await web3.eth.getAccounts();
                console.log("Accounts after request:", accounts2);
                
                if (accounts2.length === 0) {
                    throw new Error("No accounts available. Please connect your wallet.");
                }
                
                const account = accounts2[0];
                statusElement.textContent = "Preparing transaction...";
                console.log("Using account:", account);
                
                // Log the contract object
                console.log("Contract instance:", firContract);
                console.log("Contract address:", firContractAddress);
                
                // Add try/catch for method existence check
                try {
                    // Check if the method exists by calling it as a property
                    if (typeof firContract.methods.createFIR !== 'function') {
                        console.error("createFIR method doesn't exist on contract!");
                        throw new Error("Contract method 'createFIR' not found");
                    }
                } catch (methodError) {
                    console.error("Error checking contract method:", methodError);
                    throw new Error("Contract method check failed: " + methodError.message);
                }
                
                // Estimate gas for the transaction
                let gasEstimate;
                try {
                    console.log("Estimating gas for transaction with params:", {
                        firID: firData.firID,
                        victimName: firData.victimName,
                        victimContact: firData.victimContact,
                        incidentLocation: firData.incidentLocation,
                        incidentType: firData.incidentType,
                        incidentDate: firData.incidentDate,
                        incidentDescription: firData.incidentDescription,
                        filedBy: firData.filedBy,
                        filedOn: firData.filedOn,
                        status: firData.status
                    });
                    
                    gasEstimate = await firContract.methods.createFIR(
                        firData.firID,
                        firData.victimName,
                        firData.victimContact,
                        firData.incidentLocation,
                        firData.incidentType,
                        firData.incidentDate,
                        firData.incidentDescription,
                        firData.filedBy,
                        firData.filedOn,
                        firData.status
                    ).estimateGas({ from: account });
                    
                    console.log("Gas estimation successful:", gasEstimate);
                } catch (error) {
                    console.error("Gas estimation failed with specific error:", error);
                    // Use a fallback gas limit
                    gasEstimate = 3000000;
                    console.log("Using fallback gas limit:", gasEstimate);
                }
                
                // Add 20% buffer to gas estimate, capped at 4 million
                const gasLimit = Math.min(Math.floor(gasEstimate * 1.2), 4000000);
                console.log("Final gas limit:", gasLimit);
                
                statusElement.textContent = "Submitting to blockchain...";
                
                // Submit transaction with gas settings
                console.log("Sending transaction to blockchain");
                const receipt = await firContract.methods.createFIR(
                    firData.firID,
                    firData.victimName,
                    firData.victimContact,
                    firData.incidentLocation,
                    firData.incidentType,
                    firData.incidentDate,
                    firData.incidentDescription,
                    firData.filedBy,
                    firData.filedOn,
                    firData.status
                ).send({
                    from: account,
                    gas: gasLimit
                });
                
                console.log("Transaction receipt:", receipt);
                statusElement.textContent = "FIR submitted to blockchain! Verifying...";
                
                // Verify the FIR was stored correctly
                try {
                    await verifyFIROnBlockchain(firData.firID);
                    statusElement.textContent = `FIR #${firData.firID} successfully verified on blockchain!`;
                } catch (verifyError) {
                    console.error("Verification error:", verifyError);
                    statusElement.textContent = `FIR submitted to blockchain, but verification failed: ${verifyError.message}`;
                }
                
                return true;
            } catch (error) {
                console.error("Blockchain submission error:", error);
                
                // Handle specific error types
                if (error.code === 4001) {
                    // User denied transaction
                    statusElement.textContent = "Transaction was rejected from the wallet.";
                    statusElement.className = "error";
                    statusElement.style.display = "block";
                } else if (error.message && error.message.includes("gas")) {
                    // Gas-related errors
                    statusElement.textContent = "Transaction failed: Gas estimation failed. The contract might reject this FIR.";
                    statusElement.className = "error";
                    statusElement.style.display = "block";
                } else if (error.message && error.message.includes("unique")) {
                    // Duplicate FIR ID
                    statusElement.textContent = "FIR ID already exists on the blockchain. Please try again with a new ID.";
                    statusElement.className = "error";
                    statusElement.style.display = "block";
                } else {
                    // Generic error
                    statusElement.textContent = "Blockchain submission failed: " + (error.message || "Unknown error");
                    statusElement.className = "error";
                    statusElement.style.display = "block";
                }
                
                throw error;
            }
        }

        document.addEventListener('DOMContentLoaded', function() {
            // Debug localStorage contents
            function debugLocalStorage() {
                console.log("--------------- localStorage Debug ---------------");
                console.log("isLoggedIn:", localStorage.getItem("isLoggedIn"));
                console.log("isOfficerLoggedIn:", localStorage.getItem("isOfficerLoggedIn"));
                console.log("username:", localStorage.getItem("username"));
                
                try {
                    const userInfo = JSON.parse(localStorage.getItem("userInfo") || "{}");
                    console.log("userInfo:", userInfo);
                } catch (error) {
                    console.error("Error parsing userInfo:", error);
                }
                
                console.log("-----------------------------------------------");
            }
            
            // Call the debug function
            debugLocalStorage();
            
            // Debug login button
            const loginLink = document.getElementById("loginLink");
            console.log("Login link found:", loginLink);
            if (loginLink) {
                loginLink.addEventListener("click", function(e) {
                    e.preventDefault();
                    console.log("Login link clicked via event listener");
                    window.location.href = 'officer.html';
                });
            }
            
            // Check for MetaMask
            if (!window.ethereum) {
                console.log("MetaMask not detected");
                // Create a banner to inform user
                const banner = document.createElement("div");
                banner.style.backgroundColor = "#f8d7da";
                banner.style.color = "#721c24";
                banner.style.padding = "10px 15px";
                banner.style.margin = "10px 0";
                banner.style.borderRadius = "4px";
                banner.style.textAlign = "center";
                banner.innerHTML = `
                    <strong>MetaMask Not Detected</strong>
                    <p>To enable blockchain storage of FIRs, please install the 
                    <a href="https://metamask.io/download/" target="_blank">MetaMask browser extension</a>.</p>
                `;
                
                // Insert the banner at the top of the container
                const container = document.querySelector('.container');
                container.insertBefore(banner, container.firstChild);
                
                // Hide the connect wallet button
                document.getElementById("connectWalletButton").style.display = "none";
            } else {
                console.log("MetaMask detected:", window.ethereum);
            }
            
            // Check login status from localStorage
            const isLoggedIn = localStorage.getItem("isLoggedIn") === "true";
            const isOfficer = localStorage.getItem("isOfficerLoggedIn") === "true";
            const username = localStorage.getItem("username");
            const userInfo = JSON.parse(localStorage.getItem("userInfo") || "{}");
            
            // Set up connect wallet button
            const connectWalletButton = document.getElementById("connectWalletButton");
            connectWalletButton.addEventListener("click", async function() {
                try {
                    connectWalletButton.textContent = "Connecting...";
                    const success = await initWeb3();
                    if (success) {
                        updateWalletDisplay(currentAccount);
                    } else {
                        connectWalletButton.textContent = "Connect Failed";
                        setTimeout(() => {
                            connectWalletButton.textContent = "Connect Wallet";
                        }, 2000);
                    }
                } catch (error) {
                    console.error("Connection error:", error);
                    connectWalletButton.textContent = "Connection Error";
                    setTimeout(() => {
                        connectWalletButton.textContent = "Connect Wallet";
                    }, 2000);
                }
            });
            
            // Handle login display
            if (isLoggedIn) {
                document.getElementById("loginLink").style.display = "none";
                document.getElementById("logoutButton").style.display = "inline-block";
                
                if (isOfficer) {
                    // Officer is logged in
                    document.getElementById("loginStatus").innerHTML = `
                        <span class="status-indicator"></span> ${username}
                    `;
                    document.getElementById("firFormContainer").style.display = "block";
                    document.getElementById("officerOnlyMessage").style.display = "none";
                    
                    // Pre-fill fields will be done by populateOfficerDetails function
                    // No need to manually set values here
                } else {
                    // Regular user is logged in - can't file FIR
                    document.getElementById("loginStatus").innerHTML = `
                        <span class="status-indicator"></span> ${username}
                    `;
                    document.getElementById("firFormContainer").style.display = "none";
                    document.getElementById("officerOnlyMessage").style.display = "block";
                }
            } else {
                // Not logged in
                document.getElementById("firFormContainer").style.display = "none";
                document.getElementById("officerOnlyMessage").style.display = "block";
            }
            
            // Handle logout
            document.getElementById("logoutButton").addEventListener("click", function() {
                logout();
            });
            
            // Handle FIR form submission
            document.getElementById("firForm").addEventListener("submit", function(e) {
                e.preventDefault();
                submitFIR(e);
            });
            
            // Add this to the DOMContentLoaded event
            // Inside the DOMContentLoaded event, add this line after setting up the connect wallet button
            checkWalletStatus();

            // Add the event listener to the in-form connect button
            document.getElementById("formConnectWalletBtn").addEventListener("click", async function() {
                try {
                    // Reference the main connect button to mimic its behavior
                    const connectWalletButton = document.getElementById("connectWalletButton");
                    
                    // Update this button's text
                    this.textContent = "Connecting...";
                    this.disabled = true;
                    
                    // Also update the main button to show the same state
                    connectWalletButton.textContent = "Connecting...";
                    connectWalletButton.disabled = true;
                    
                    const success = await initWeb3();
                    
                    if (success) {
                        // If successful, update the wallet display
                        updateWalletDisplay(currentAccount);
                        
                        // Update both buttons
                        this.textContent = "Connected";
                        connectWalletButton.textContent = "Wallet Connected";
                    } else {
                        // If failed, reset both buttons
                        this.textContent = "Connect Failed";
                        this.disabled = false;
                        connectWalletButton.textContent = "Connect Failed";
                        connectWalletButton.disabled = false;
                        
                        // Add debug button
                        const debugButton = document.createElement("button");
                        debugButton.textContent = "Debug Connection";
                        debugButton.className = "wallet-connect-btn";
                        debugButton.style.marginTop = "10px";
                        debugButton.style.backgroundColor = "#e74c3c";
                        debugButton.addEventListener("click", debugMetaMaskConnection);
                        this.parentNode.appendChild(debugButton);
                        
                        setTimeout(() => {
                            this.textContent = "Connect to MetaMask";
                            connectWalletButton.textContent = "Connect Wallet";
                        }, 2000);
                    }
                } catch (error) {
                    console.error("Connection error:", error);
                    this.textContent = "Connection Error";
                    this.disabled = false;
                    document.getElementById("connectWalletButton").textContent = "Connection Error";
                    
                    // Add debug button
                    const debugButton = document.createElement("button");
                    debugButton.textContent = "Debug Connection";
                    debugButton.className = "wallet-connect-btn";
                    debugButton.style.marginTop = "10px";
                    debugButton.style.backgroundColor = "#e74c3c";
                    debugButton.addEventListener("click", debugMetaMaskConnection);
                    this.parentNode.appendChild(debugButton);
                    
                    setTimeout(() => {
                        this.textContent = "Connect to MetaMask";
                        document.getElementById("connectWalletButton").textContent = "Connect Wallet";
                    }, 2000);
                }
            });

            // Additional code to set FIR ID and officer details when the form is first loaded
            const firIDField = document.getElementById("firID");
            if (firIDField) {
                firIDField.value = generateFIRID();
                firIDField.readOnly = true;
                console.log("Generated initial FIR ID:", firIDField.value);
            }
            
            // Pre-fill officer details
            populateOfficerDetails();
        });
        
        // FIR submission function
        async function submitFIR(event) {
            event.preventDefault();
            console.log("Submit FIR function called");
            
            const successMessage = document.getElementById("successMessage");
            const errorMessage = document.getElementById("errorMessage");
            const walletNotification = document.getElementById("walletNotification");
            
            successMessage.textContent = "";
            successMessage.style.display = "none";
            errorMessage.textContent = "";
            errorMessage.style.display = "none";
            
            // Show wallet notification if wallet is not connected but MetaMask is available
            if (!currentAccount && window.ethereum) {
                console.log("No wallet connected, showing notification");
                walletNotification.style.display = "block";
                
                // Scroll to the wallet notification
                walletNotification.scrollIntoView({ behavior: 'smooth', block: 'center' });
                
                // Add a more noticeable effect
                walletNotification.classList.add("highlight");
                setTimeout(() => {
                    walletNotification.classList.remove("highlight");
                }, 2000);
            }
            
            // Get form values
            const firID = document.getElementById("firID").value;
            const victimName = document.getElementById("victimName").value;
            const victimContact = document.getElementById("victimContact").value || "N/A";
            const incidentLocation = document.getElementById("incidentLocation").value;
            const incidentType = document.getElementById("incidentType").value;
            const incidentDate = document.getElementById("incidentDate").value;
            const incidentDescription = document.getElementById("incidentDescription").value;
            const officerDetails = document.getElementById("officerDetails").value;
            
            console.log("Form values collected:", { 
                firID, victimName, victimContact, incidentLocation, 
                incidentType, incidentDate, incidentDescription, officerDetails
            });
            
            // Validate input - ensure all required fields are filled
            // Note: firID and officerDetails are auto-generated so they should always be filled
            if (!firID) {
                console.error("FIR ID is missing - this should never happen as it's auto-generated");
                errorMessage.textContent = "System error: FIR ID could not be generated";
                errorMessage.style.display = "block";
                return;
            }
            
            if (!victimName || !incidentLocation || !incidentType || !incidentDate || !incidentDescription) {
                console.log("Validation failed - missing required fields");
                errorMessage.textContent = "Please fill all required fields";
                errorMessage.style.display = "block";
                return;
            }
            
            if (!officerDetails) {
                console.log("Officer details missing - user might not be logged in as an officer");
                errorMessage.textContent = "You must be logged in as an officer to file an FIR";
                errorMessage.style.display = "block";
                return;
            }

            // Default filedBy to the officer details if available
            let filedBy = officerDetails;
            
            // If not logged in as officer, try to get user info
            if (localStorage.getItem("isOfficerLoggedIn") !== "true") {
                try {
                    const userInfo = JSON.parse(localStorage.getItem("userInfo"));
                    if (userInfo && userInfo.username) {
                        filedBy = userInfo.username;
                    }
                } catch (error) {
                    console.error("Error parsing user info:", error);
                    // Keep using officer details as fallback
                }
            }

            // Get current date
            const filedOn = new Date().toISOString().split('T')[0];
            
            // Create FIR object
            const firData = {
                firID: firID,
                victimName: victimName,
                victimContact: victimContact,
                incidentLocation: incidentLocation,
                incidentType: incidentType,
                incidentDate: incidentDate,
                incidentDescription: incidentDescription,
                filedBy: filedBy,
                filedOn: filedOn,
                status: "Pending"
            };
            
            console.log("FIR data prepared:", firData);
            
            // Save to localStorage first (for immediate use)
            try {
                // Get existing FIRs or initialize empty array
                let firs = JSON.parse(localStorage.getItem("firs")) || [];
                
                // Add the new FIR
                firs.push(firData);
                
                // Save back to localStorage
                localStorage.setItem("firs", JSON.stringify(firs));
                console.log("FIR saved to localStorage");
                
                successMessage.textContent = "FIR saved locally.";
                successMessage.style.display = "block";
                
                // Try to save to blockchain if Web3 is available
                if (window.ethereum && web3 && firContract && currentAccount) {
                    console.log("Blockchain components available, attempting blockchain submission");
                    try {
                        // Show submitting message
                        successMessage.textContent = "Submitting to blockchain...";
                        
                        // Submit to blockchain
                        await submitToBlockchain(firData);
                        
                        // Reset form after both saves are successful
                        resetForm();
                        
                        // Show FIR details after successful submission
                        showFIRDetails(firData);
                    } catch (blockchainError) {
                        console.error("Blockchain submission failed:", blockchainError);
                        // We already have error handling in submitToBlockchain function
                        // Local save was successful, so we don't need to show an error
                    }
                } else {
                    // Only localStorage available
                    console.log("Blockchain components not available:", {
                        ethereum: !!window.ethereum,
                        web3: !!web3,
                        contract: !!firContract,
                        account: currentAccount
                    });
                    
                    if (!window.ethereum) {
                        successMessage.textContent = "FIR saved locally. MetaMask not installed.";
                    } else if (!currentAccount) {
                        successMessage.textContent = "FIR saved locally. Please connect your wallet for blockchain storage.";
                    } else {
                        successMessage.textContent = "FIR saved locally only.";
                    }
                    
                    resetForm();
                    showFIRDetails(firData);
                }
            } catch (error) {
                // Handle localStorage errors
                console.error("Error saving to localStorage:", error);
                errorMessage.textContent = "Error saving FIR: " + (error.message || "Unknown error");
                errorMessage.style.display = "block";
            }
        }
        
        // Function to display FIR details after submission
        function showFIRDetails(firData) {
            const formElement = document.getElementById("firForm");
            const successMessage = document.getElementById("successMessage");
            
            // Create details container
            const detailsDiv = document.createElement("div");
            detailsDiv.className = "fir-details";
            detailsDiv.innerHTML = `
                <h3>FIR Submitted Successfully</h3>
                <div class="fir-summary">
                    <div class="fir-header">
                        <div class="fir-id">${firData.firID}</div>
                        <div class="fir-status">${firData.status}</div>
                    </div>
                    <div class="fir-meta">
                        <p><strong>Filed By:</strong> ${firData.filedBy}</p>
                        <p><strong>Filed On:</strong> ${firData.filedOn}</p>
                    </div>
                </div>
                <div class="details-container">
                    <div class="details-column">
                        <h4>Victim Information</h4>
                        <p><strong>Name:</strong> ${firData.victimName}</p>
                        <p><strong>Contact:</strong> ${firData.victimContact}</p>
                    </div>
                    <div class="details-column">
                        <h4>Incident Details</h4>
                        <p><strong>Type:</strong> ${firData.incidentType}</p>
                        <p><strong>Location:</strong> ${firData.incidentLocation}</p>
                        <p><strong>Date:</strong> ${firData.incidentDate}</p>
                    </div>
                </div>
                <div class="description-section">
                    <h4>Description</h4>
                    <p>${firData.incidentDescription}</p>
                </div>
                <button id="newFirBtn" class="button">File New FIR</button>
                <button id="printFirBtn" class="button print-btn">Print FIR</button>
            `;
            
            // Insert after the success message
            successMessage.insertAdjacentElement('afterend', detailsDiv);
            
            // Hide the form
            formElement.style.display = "none";
            
            // Add event listener to the "File New FIR" button
            document.getElementById("newFirBtn").addEventListener("click", function() {
                // Remove the details div
                detailsDiv.remove();
                // Show the form again
                formElement.style.display = "block";
                // Clear the success message
                successMessage.textContent = "";
            });
            
            // Add event listener to the "Print FIR" button
            document.getElementById("printFirBtn").addEventListener("click", function() {
                // Create a printable version of the FIR in a new window
                const printWindow = window.open('', '_blank');
                printWindow.document.write(`
                    <html>
                    <head>
                        <title>FIR ${firData.firID}</title>
                        <style>
                            body { font-family: Arial, sans-serif; padding: 20px; }
                            .header { text-align: center; margin-bottom: 30px; border-bottom: 2px solid #000; padding-bottom: 10px; }
                            .title { font-size: 24px; font-weight: bold; }
                            .fir-id { font-size: 18px; margin-top: 10px; }
                            .section { margin: 20px 0; }
                            .section-title { font-weight: bold; border-bottom: 1px solid #ddd; padding-bottom: 5px; margin-bottom: 10px; }
                            .row { display: flex; margin-bottom: 10px; }
                            .label { font-weight: bold; width: 200px; }
                            .value { flex: 1; }
                            .footer { margin-top: 50px; border-top: 1px solid #ddd; padding-top: 20px; }
                            .signatures { display: flex; justify-content: space-between; margin-top: 70px; }
                            .signature { width: 200px; text-align: center; border-top: 1px solid #000; padding-top: 5px; }
                        </style>
                    </head>
                    <body>
                        <div class="header">
                            <div class="title">FIRST INFORMATION REPORT</div>
                            <div class="fir-id">FIR Number: ${firData.firID}</div>
                        </div>
                        
                        <div class="section">
                            <div class="section-title">Filing Information</div>
                            <div class="row">
                                <div class="label">Filed By:</div>
                                <div class="value">${firData.filedBy}</div>
                            </div>
                            <div class="row">
                                <div class="label">Filed On:</div>
                                <div class="value">${firData.filedOn}</div>
                            </div>
                            <div class="row">
                                <div class="label">Status:</div>
                                <div class="value">${firData.status}</div>
                            </div>
                        </div>
                        
                        <div class="section">
                            <div class="section-title">Victim Information</div>
                            <div class="row">
                                <div class="label">Name:</div>
                                <div class="value">${firData.victimName}</div>
                            </div>
                            <div class="row">
                                <div class="label">Contact:</div>
                                <div class="value">${firData.victimContact}</div>
                            </div>
                        </div>
                        
                        <div class="section">
                            <div class="section-title">Incident Details</div>
                            <div class="row">
                                <div class="label">Type:</div>
                                <div class="value">${firData.incidentType}</div>
                            </div>
                            <div class="row">
                                <div class="label">Location:</div>
                                <div class="value">${firData.incidentLocation}</div>
                            </div>
                            <div class="row">
                                <div class="label">Date:</div>
                                <div class="value">${firData.incidentDate}</div>
                            </div>
                        </div>
                        
                        <div class="section">
                            <div class="section-title">Incident Description</div>
                            <div>${firData.incidentDescription.replace(/\n/g, '<br>')}</div>
                        </div>
                        
                        <div class="signatures">
                            <div class="signature">Complainant Signature</div>
                            <div class="signature">Officer Signature</div>
                        </div>
                        
                        <div class="footer">
                            <p>This is a computer-generated FIR. The details provided in this report have been recorded in the blockchain.</p>
                        </div>
                    </body>
                    </html>
                `);
                printWindow.document.close();
                setTimeout(() => {
                    printWindow.print();
                }, 500);
            });
        }
        
        // Function to reset form and regenerate FIR ID
        function resetForm() {
            console.log("Resetting form");
            
            // Reset form
            document.getElementById("firForm").reset();
            
            // Generate new random FIR ID
            const firIDField = document.getElementById("firID");
            if (firIDField) {
                firIDField.value = generateFIRID();
                // Make the FIR ID field read-only since it's auto-generated
                firIDField.readOnly = true;
            }
            
            // Clear messages
            document.getElementById("successMessage").textContent = "";
            document.getElementById("successMessage").className = "";
            document.getElementById("errorMessage").textContent = "";
            
            // Set today's date as default for incident date
            const today = new Date().toISOString().split('T')[0];
            if (document.getElementById("incidentDate")) {
                document.getElementById("incidentDate").value = today;
            }
            
            // Fill officer details
            populateOfficerDetails();
            
            // Auto-focus on the first empty required field that isn't read-only
            const firstEmptyField = Array.from(document.querySelectorAll("input[required]:not([readonly]), textarea[required]"))
                .find(field => !field.value);
            if (firstEmptyField) {
                firstEmptyField.focus();
            }
            
            console.log("Form reset complete");
        }

        // Function to check if the FIR was successfully stored on the blockchain
        async function verifyFIROnBlockchain(firID) {
            try {
                const successMessage = document.getElementById("successMessage");
                
                // Remove any existing classes and add pending class
                successMessage.className = "";
                successMessage.classList.add("pending");
                successMessage.textContent = "Verifying FIR record on blockchain...";
                successMessage.style.display = "block";
                
                // Call the getFIRByID function on the contract
                const firDetails = await firContract.methods.getFIRByID(firID).call();
                
                // Check if the FIR exists and has valid data
                if (firDetails && firDetails.firID === firID) {
                    console.log("FIR verified on blockchain:", firDetails);
                    
                    // Change to verified class
                    successMessage.classList.remove("pending");
                    successMessage.classList.add("verified");
                    successMessage.textContent = `FIR #${firID} successfully verified on blockchain!`;
                    return true;
                } else {
                    throw new Error("FIR verification failed");
                }
            } catch (error) {
                console.error("Error verifying FIR on blockchain:", error);
                
                // Change to error class
                const successMessage = document.getElementById("successMessage");
                successMessage.classList.remove("pending");
                successMessage.classList.add("error");
                successMessage.textContent = "Could not verify FIR: " + (error.message || "Unknown error");
                
                throw new Error("Could not verify FIR: " + (error.message || "Unknown error"));
            }
        }
        
        // Function to retrieve FIR from blockchain by ID
        async function getFIRFromBlockchain(firID) {
            try {
                return await firContract.methods.getFIRByID(firID).call();
            } catch (error) {
                console.error("Error retrieving FIR from blockchain:", error);
                return null;
            }
        }

        // Add a debug function to help diagnose connection issues
        async function debugMetaMaskConnection() {
            const debugInfo = {
                metamaskInstalled: window.ethereum ? "Yes" : "No",
                networkInfo: "Not checked",
                accountsAvailable: "Not checked",
                contractAddress: firContractAddress,
                error: null
            };
            
            try {
                if (window.ethereum) {
                    // Check if we can get the network ID
                    try {
                        const networkId = await window.ethereum.request({ method: 'net_version' });
                        debugInfo.networkInfo = {
                            networkId: networkId,
                            knownNetworks: {
                                "1": "Ethereum Mainnet",
                                "3": "Ropsten Testnet",
                                "4": "Rinkeby Testnet",
                                "5": "Goerli Testnet",
                                "42": "Kovan Testnet",
                                "56": "Binance Smart Chain",
                                "97": "BSC Testnet",
                                "137": "Polygon (Matic)",
                                "80001": "Mumbai Testnet",
                                "31337": "Hardhat Local",
                                "1337": "Ganache Local"
                            }
                        };
                        
                        debugInfo.networkInfo.networkName = 
                            debugInfo.networkInfo.knownNetworks[networkId] || "Unknown Network";
                    } catch (networkError) {
                        debugInfo.networkInfo = "Error getting network: " + networkError.message;
                    }
                    
                    // Check if we can get accounts
                    try {
                        const accounts = await window.ethereum.request({ method: 'eth_accounts' });
                        debugInfo.accountsAvailable = accounts.length > 0 ? 
                            `Yes (${accounts.length} accounts)` : "No accounts available";
                    } catch (accountsError) {
                        debugInfo.accountsAvailable = "Error getting accounts: " + accountsError.message;
                    }
                }
            } catch (error) {
                debugInfo.error = error.message;
            }
            
            // Display the debug info
            alert(
                "MetaMask Connection Debug Info:\n\n" +
                "MetaMask Installed: " + debugInfo.metamaskInstalled + "\n" +
                "Network: " + (typeof debugInfo.networkInfo === 'object' ? 
                    `${debugInfo.networkInfo.networkName} (ID: ${debugInfo.networkInfo.networkId})` : 
                    debugInfo.networkInfo) + "\n" +
                "Accounts Available: " + debugInfo.accountsAvailable + "\n" +
                "Contract Address: " + debugInfo.contractAddress + "\n" +
                (debugInfo.error ? "Error: " + debugInfo.error : "")
            );
            
            // Also log to console for more detailed view
            console.log("MetaMask Debug Info:", debugInfo);
            return debugInfo;
        }

        // Generate unique FIR ID with prefix and random numbers
        function generateFIRID() {
            // Get current date components
            const date = new Date();
            const year = date.getFullYear().toString().substr(-2); // Last 2 digits of year
            const month = String(date.getMonth() + 1).padStart(2, '0'); // Month (01-12)
            const day = String(date.getDate()).padStart(2, '0'); // Day (01-31)
            
            // Generate random 4-digit number
            const random = Math.floor(1000 + Math.random() * 9000);
            
            // Format: FIR-YYMMDD-XXXX (YY=year, MM=month, DD=day, XXXX=random number)
            return `FIR-${year}${month}${day}-${random}`;
        }

        // Get officer details and pre-fill the form
        function populateOfficerDetails() {
            if (localStorage.getItem("isOfficerLoggedIn") === "true") {
                try {
                    const userInfo = JSON.parse(localStorage.getItem("userInfo") || "{}");
                    console.log("Retrieved user info:", userInfo);
                    
                    // Generate officer details string
                    let officerDetails = "";
                    if (userInfo.username) {
                        officerDetails += userInfo.username;
                    }
                    if (userInfo.badgeNumber) {
                        officerDetails += ` (Badge: ${userInfo.badgeNumber}`;
                        
                        if (userInfo.policeStation) {
                            officerDetails += `, Station: ${userInfo.policeStation}`;
                        }
                        
                        officerDetails += ")";
                    }
                    
                    // Set the officer details if the field exists
                    const officerDetailsField = document.getElementById("officerDetails");
                    if (officerDetailsField && officerDetails) {
                        officerDetailsField.value = officerDetails;
                        // Make the field read-only since it's auto-filled
                        officerDetailsField.readOnly = true;
                    }
                    
                    // Pre-fill any other officer-specific fields
                    const policeStationField = document.getElementById("policeStation");
                    if (policeStationField && userInfo.policeStation) {
                        policeStationField.value = userInfo.policeStation;
                    }
                    
                    console.log("Officer details pre-filled:", officerDetails);
                } catch (error) {
                    console.error("Error setting officer details:", error);
                }
            } else {
                console.log("Not logged in as officer, skipping auto-fill");
            }
        }

        // Add a direct logout function to make sure it works as well
        function logout() {
            console.log("Logout function called");
            // Reset login state
            localStorage.removeItem("isLoggedIn");
            localStorage.removeItem("isOfficerLoggedIn");
            localStorage.removeItem("userRole");
            localStorage.removeItem("username");
            localStorage.removeItem("userInfo");
            
            // Redirect to login page
            window.location.href = 'officer.html';
        }
        
        // Add a direct login navigation function
        function navigateToLogin() {
            console.log("Navigate to login function called");
            
            // Method 1: Direct location change
            window.location.href = 'officer.html';
            
            // Method 2: As a fallback, after a short delay
            setTimeout(function() {
                console.log("Using fallback navigation method");
                window.open('officer.html', '_blank');
            }, 300);
        }
    </script>
</body>
</html>